// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _JFlexLexer.flex

/*
 * Copyright 2011-present Greg Shrago
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.intellij.jflex.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static org.intellij.jflex.parser.JFlexParserDefinition.FLEX_NEWLINE;
import static org.intellij.jflex.psi.JFlexTypes.*;


public class _JFlexLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int MACROS = 4;
  public static final int CODE = 6;
  public static final int REGEXPSTART = 8;
  public static final int EXPRBAR = 10;
  public static final int REGEXP = 12;
  public static final int STATES = 14;
  public static final int ACTION_CODE = 16;
  public static final int STRING_CONTENT = 18;
  public static final int CHARCLASS = 20;
  public static final int MACROUSE = 22;
  public static final int REPEATEXP = 24;
  public static final int CLASSCHARS = 26;
  public static final int CHARRANGE = 28;
  public static final int REGEXP_CODEPOINT = 30;
  public static final int STRING_CODEPOINT = 32;
  public static final int SKIP_TOEOL = 34;
  public static final int SKIP_WSNL = 36;
  public static final int REPORT_UNCLOSED = 38;
  public static final int REGEXPSTART0 = 40;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  3,  4,  4,  5,  6,  7,  7,  8,  8,  9,  9, 
    10, 10, 11, 11, 12, 12, 13, 13, 13, 13, 14, 14, 15, 15, 16, 16, 
    17, 17, 18, 18, 19, 19, 20, 20, 21, 21
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\10\u3000\31\u1f00\1\u0100\1\u3100\1\u3200"+
    "\1\u0100\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u3b00\1\u0100\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800"+
    "\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u4f00\1\u1f00"+
    "\1\u5000\1\u5100\1\u5200\1\u5300\3\u0100\1\u5400\1\u5500\1\u5600"+
    "\12\u1f00\4\u0100\1\u5700\17\u1f00\2\u0100\1\u5800\41\u1f00\2\u0100"+
    "\1\u5900\1\u5a00\2\u1f00\1\u5b00\1\u5c00\27\u0100\1\u5d00\2\u0100"+
    "\1\u5e00\1\u5f00\1\u6000\1\u6100\42\u1f00\1\u0100\1\u6200\1\u6300"+
    "\11\u1f00\1\u6400\24\u1f00\1\u6500\1\u6600\1\u1f00\1\u6700\1\u6800"+
    "\1\u6900\1\u6a00\2\u1f00\1\u6b00\5\u1f00\1\u6c00\1\u6d00\1\u6e00"+
    "\5\u1f00\1\u6f00\1\u7000\2\u1f00\1\u7100\1\u1f00\1\u7200\2\u1f00"+
    "\1\u7300\11\u1f00\1\u7400\4\u1f00\246\u0100\1\u7500\20\u0100\1\u7600"+
    "\1\u7700\25\u0100\1\u7800\34\u0100\1\u7900\14\u1f00\2\u0100\1\u7a00"+
    "\5\u1f00\23\u5f00\1\u7b00\u0aec\u1f00\1\u7c00\1\u7d00\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\10\0\1\1\1\2\1\3\2\4\1\5\16\0\4\6"+
    "\1\2\1\7\1\10\1\6\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\2\27\2\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\6\1\36\1\37\1\40\1\41\1\6\3\42"+
    "\1\43\1\44\1\45\10\46\1\47\1\50\2\46\1\51"+
    "\1\46\1\52\1\46\1\51\3\46\1\53\1\54\1\55"+
    "\1\56\1\46\1\6\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\1\46\1\71\1\72"+
    "\1\73\1\74\1\75\1\46\1\76\1\77\1\100\1\101"+
    "\1\102\1\103\1\104\1\105\1\46\1\106\1\107\1\110"+
    "\1\111\6\0\1\112\32\0\2\6\4\113\4\6\1\46"+
    "\2\6\1\0\7\6\1\46\4\6\1\46\5\6\27\46"+
    "\1\6\37\46\1\6\u01ca\46\4\6\14\46\16\6\5\46"+
    "\7\6\1\46\1\6\1\46\21\6\105\0\1\114\52\0"+
    "\5\46\1\6\2\46\2\6\4\46\1\6\1\46\6\6"+
    "\1\46\1\6\3\46\1\6\1\46\1\6\24\46\1\6"+
    "\123\46\1\6\213\46\1\6\5\0\2\6\246\46\1\6"+
    "\46\46\2\6\1\46\6\6\51\46\6\6\1\113\1\6"+
    "\37\0\16\114\1\6\1\114\1\6\2\114\1\6\2\114"+
    "\1\6\1\114\10\6\33\46\4\6\4\46\15\6\6\0"+
    "\5\6\1\113\4\6\13\114\1\6\1\0\3\6\53\46"+
    "\15\114\1\0\21\114\4\6\2\46\1\114\143\46\1\6"+
    "\1\46\7\114\1\0\1\6\2\0\4\114\2\46\2\114"+
    "\1\6\3\0\1\114\2\46\12\114\3\46\2\6\1\46"+
    "\17\6\1\0\1\46\1\114\36\46\20\114\13\0\2\6"+
    "\131\46\13\114\1\46\16\6\12\114\41\46\11\0\2\46"+
    "\4\6\1\46\2\6\1\0\2\113\26\46\2\114\2\0"+
    "\1\46\11\114\1\46\3\114\1\46\4\114\1\0\22\6"+
    "\31\46\3\0\4\6\13\46\65\6\25\46\1\6\10\46"+
    "\12\113\13\6\1\0\14\114\3\0\7\114\6\0\24\114"+
    "\66\46\2\114\1\0\1\46\17\114\1\0\2\114\1\46"+
    "\4\0\3\114\12\46\2\114\2\6\12\114\1\6\20\46"+
    "\3\114\1\6\10\46\2\6\2\46\2\6\26\46\1\6"+
    "\7\46\1\6\1\46\3\6\4\46\2\6\1\0\1\46"+
    "\7\114\2\6\2\114\2\6\2\114\1\0\1\46\10\6"+
    "\1\114\4\6\2\46\1\6\3\46\2\114\2\6\12\114"+
    "\2\46\2\113\7\6\1\113\1\46\1\6\1\0\2\6"+
    "\3\114\1\6\6\46\4\6\2\46\2\6\26\46\1\6"+
    "\7\46\1\6\2\46\1\6\2\46\1\6\2\46\2\6"+
    "\1\0\1\6\5\114\4\6\2\114\2\6\2\114\1\0"+
    "\3\6\1\114\7\6\4\46\1\6\1\46\7\6\14\114"+
    "\3\46\1\114\13\6\3\114\1\6\11\46\1\6\3\46"+
    "\1\6\26\46\1\6\7\46\1\6\2\46\1\6\5\46"+
    "\2\6\1\0\1\46\10\114\1\6\3\114\1\6\2\114"+
    "\1\0\2\6\1\46\17\6\2\46\2\114\2\6\12\114"+
    "\1\6\1\113\7\6\1\46\3\114\3\0\1\6\3\114"+
    "\1\6\10\46\2\6\2\46\2\6\26\46\1\6\7\46"+
    "\1\6\2\46\1\6\5\46\2\6\1\0\1\46\7\114"+
    "\2\6\2\114\2\6\2\114\1\0\7\6\1\0\2\114"+
    "\4\6\2\46\1\6\3\46\2\114\2\6\12\114\1\6"+
    "\1\46\20\6\1\114\1\46\1\6\6\46\3\6\3\46"+
    "\1\6\4\46\3\6\2\46\1\6\1\46\1\6\2\46"+
    "\3\6\2\46\3\6\3\46\3\6\14\46\4\6\5\114"+
    "\3\6\3\114\1\6\3\114\1\0\2\6\1\46\6\6"+
    "\1\114\16\6\12\114\11\6\1\113\6\6\4\114\1\0"+
    "\10\46\1\6\3\46\1\6\27\46\1\6\20\46\3\6"+
    "\1\46\7\114\1\6\3\114\1\6\3\114\1\0\7\6"+
    "\2\114\1\6\3\46\5\6\2\46\2\114\2\6\12\114"+
    "\20\6\1\46\3\114\1\6\10\46\1\6\3\46\1\6"+
    "\27\46\1\6\12\46\1\6\5\46\2\6\1\0\1\46"+
    "\7\114\1\6\3\114\1\6\3\114\1\0\7\6\2\114"+
    "\7\6\1\46\1\6\2\46\2\114\2\6\12\114\1\6"+
    "\2\46\15\6\4\114\1\113\10\46\1\6\3\46\1\6"+
    "\51\46\2\0\1\46\7\114\1\6\3\114\1\6\3\114"+
    "\1\0\1\46\5\6\3\46\1\114\7\6\3\46\2\114"+
    "\2\6\12\114\12\6\6\46\1\6\1\0\2\114\1\6"+
    "\22\46\3\6\30\46\1\6\11\46\1\6\1\46\2\6"+
    "\7\46\3\6\1\0\4\6\6\114\1\6\1\114\1\6"+
    "\10\114\6\6\12\114\2\6\2\114\15\6\60\46\1\114"+
    "\2\46\7\114\4\6\1\113\7\46\6\0\1\114\1\0"+
    "\1\6\12\114\47\6\2\46\1\6\1\46\1\6\5\46"+
    "\1\6\30\46\1\6\1\46\1\6\12\46\1\114\2\46"+
    "\6\114\1\0\2\114\1\46\2\6\5\46\1\6\1\46"+
    "\1\6\5\0\1\114\2\6\12\114\2\6\4\46\40\6"+
    "\1\46\27\6\2\0\6\6\12\114\13\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\2\0\10\46\1\6\44\46"+
    "\4\6\21\114\3\0\1\6\2\0\5\46\13\114\1\6"+
    "\44\114\11\6\1\0\71\6\53\46\14\114\1\0\1\114"+
    "\2\0\4\114\1\46\12\114\6\6\6\46\4\114\4\46"+
    "\3\114\1\46\3\114\2\46\7\114\3\46\4\114\15\46"+
    "\14\114\1\46\17\114\2\6\46\46\1\6\1\46\5\6"+
    "\1\46\2\6\53\46\1\6\115\46\1\6\4\46\2\6"+
    "\7\46\1\6\1\46\1\6\4\46\2\6\51\46\1\6"+
    "\4\46\2\6\41\46\1\6\4\46\2\6\7\46\1\6"+
    "\1\46\1\6\4\46\2\6\17\46\1\6\71\46\1\6"+
    "\4\46\2\6\103\46\2\6\3\0\40\6\20\46\20\6"+
    "\126\46\2\6\6\46\3\6\u016c\46\2\6\21\46\1\6"+
    "\32\46\5\6\113\46\3\6\13\46\7\6\15\46\1\6"+
    "\4\46\2\114\1\0\13\6\22\46\2\114\1\0\13\6"+
    "\22\46\2\114\14\6\15\46\1\6\3\46\1\6\2\114"+
    "\14\6\64\46\2\0\23\114\13\0\3\6\1\46\3\6"+
    "\1\113\1\46\1\0\2\6\12\114\41\6\4\0\1\6"+
    "\12\114\6\6\131\46\7\6\5\46\2\114\42\46\1\114"+
    "\1\46\5\6\106\46\12\6\37\46\1\6\14\114\4\6"+
    "\11\114\3\0\12\6\12\114\36\46\2\6\5\46\13\6"+
    "\54\46\4\6\32\46\6\6\12\114\46\6\27\46\5\114"+
    "\4\6\65\46\12\114\1\6\1\0\24\114\10\0\2\6"+
    "\1\0\12\114\6\6\12\114\15\6\1\46\10\6\16\0"+
    "\1\6\2\0\77\6\5\114\57\46\1\0\17\114\1\0"+
    "\7\46\4\6\12\114\21\6\11\0\14\6\3\114\36\46"+
    "\11\114\2\0\2\114\2\46\12\114\54\46\1\0\13\114"+
    "\2\0\14\6\44\46\23\114\1\0\10\6\12\114\3\6"+
    "\3\46\12\114\44\46\2\6\11\46\7\6\53\46\2\6"+
    "\3\46\20\6\3\0\1\6\25\0\4\46\1\0\6\46"+
    "\1\0\2\46\3\0\1\46\5\6\300\46\47\0\16\114"+
    "\5\0\1\6\5\0\26\46\2\6\6\46\2\6\46\46"+
    "\2\6\6\46\2\6\10\46\1\6\1\46\1\6\1\46"+
    "\1\6\1\46\1\6\37\46\2\6\65\46\1\6\7\46"+
    "\1\6\1\46\3\6\3\46\1\6\7\46\3\6\4\46"+
    "\2\6\6\46\4\6\15\46\5\6\3\46\1\6\7\46"+
    "\16\6\5\0\30\6\2\4\5\0\20\6\2\113\23\6"+
    "\1\113\13\6\5\0\1\6\12\0\1\6\1\46\15\6"+
    "\1\46\20\6\15\46\3\6\40\113\20\6\15\0\4\6"+
    "\1\0\3\6\14\0\21\6\1\46\4\6\1\46\2\6"+
    "\12\46\1\6\1\46\3\6\5\46\6\6\1\46\1\6"+
    "\1\46\1\6\1\46\1\6\4\46\1\6\13\46\2\6"+
    "\4\46\5\6\5\46\4\6\1\46\21\6\51\46\u022d\6"+
    "\64\115\26\6\57\46\1\6\57\46\1\6\205\46\6\6"+
    "\4\46\3\0\2\46\14\6\46\46\1\6\1\46\5\6"+
    "\1\46\2\6\70\46\7\6\1\46\17\6\1\0\27\46"+
    "\11\6\7\46\1\6\7\46\1\6\7\46\1\6\7\46"+
    "\1\6\7\46\1\6\7\46\1\6\7\46\1\6\7\46"+
    "\1\6\40\114\57\6\1\46\325\6\3\46\31\6\11\46"+
    "\6\0\1\6\5\46\2\6\5\46\4\6\126\46\2\6"+
    "\2\0\2\6\3\46\1\6\132\46\1\6\4\46\5\6"+
    "\53\46\1\6\136\46\21\6\33\46\5\113\60\6\306\46"+
    "\12\113\100\6\360\46\15\113\3\6\215\46\103\6\56\46"+
    "\2\6\15\46\3\6\20\46\12\114\2\46\24\6\57\46"+
    "\1\0\4\6\10\114\2\0\1\6\37\46\2\114\120\46"+
    "\2\0\45\6\11\46\2\6\147\46\2\6\65\46\2\6"+
    "\5\46\4\113\52\6\2\113\13\46\1\114\3\46\1\0"+
    "\4\46\1\114\27\46\5\114\4\6\1\0\13\6\1\113"+
    "\7\6\64\46\14\6\2\114\62\46\20\114\1\0\1\114"+
    "\12\6\12\114\6\6\22\0\6\46\3\6\1\46\1\6"+
    "\2\46\13\114\34\46\5\114\3\0\2\6\27\46\14\114"+
    "\1\0\14\6\35\46\3\6\4\114\57\46\1\0\14\114"+
    "\1\0\16\6\1\46\12\114\6\6\5\46\1\114\12\46"+
    "\12\114\5\46\1\6\51\46\16\114\11\6\3\46\1\114"+
    "\10\46\2\114\2\6\12\114\6\6\27\46\3\6\1\46"+
    "\3\114\62\46\1\114\1\46\3\114\2\46\2\114\5\46"+
    "\1\114\1\0\1\46\1\0\1\46\30\6\3\46\2\6"+
    "\13\46\5\114\2\6\3\46\1\114\1\0\12\6\6\46"+
    "\2\6\6\46\2\6\6\46\11\6\7\46\1\6\7\46"+
    "\1\6\53\46\1\6\14\46\2\113\6\6\163\46\10\114"+
    "\1\6\2\0\2\6\12\114\6\6\244\46\14\6\27\46"+
    "\4\6\61\46\4\6\u0100\116\156\46\2\6\152\46\46\6"+
    "\7\46\14\6\5\46\5\6\1\46\1\114\12\46\1\6"+
    "\15\46\1\6\5\46\1\6\1\46\1\6\2\46\1\6"+
    "\2\46\1\6\154\46\41\6\153\46\22\6\100\46\2\6"+
    "\66\46\50\6\14\46\1\113\3\6\20\0\20\6\20\0"+
    "\3\6\2\113\30\6\3\113\31\6\1\113\6\6\5\46"+
    "\1\6\207\46\2\6\1\0\4\6\1\113\13\6\12\114"+
    "\7\6\32\46\4\6\1\113\1\6\32\46\13\6\131\46"+
    "\3\6\6\46\2\6\6\46\2\6\6\46\2\6\3\46"+
    "\3\6\2\113\3\6\2\113\22\6\3\0\4\6\14\46"+
    "\1\6\32\46\1\6\23\46\1\6\2\46\1\6\17\46"+
    "\2\6\16\46\42\6\173\46\105\6\65\46\210\6\1\0"+
    "\202\6\35\46\3\6\61\46\17\6\1\0\37\6\40\46"+
    "\15\6\36\46\5\6\46\46\5\114\5\6\36\46\2\6"+
    "\44\46\4\6\10\46\1\6\5\46\52\6\236\46\2\6"+
    "\12\114\6\6\44\46\4\6\44\46\4\6\50\46\10\6"+
    "\64\46\234\6\67\46\11\6\26\46\12\6\10\46\230\6"+
    "\6\46\2\6\1\46\1\6\54\46\1\6\2\46\3\6"+
    "\1\46\2\6\27\46\12\6\27\46\11\6\37\46\101\6"+
    "\23\46\1\6\2\46\12\6\26\46\12\6\32\46\106\6"+
    "\70\46\6\6\2\46\100\6\1\46\3\114\1\6\2\114"+
    "\5\6\4\114\4\46\1\6\3\46\1\6\35\46\2\6"+
    "\3\0\4\6\1\0\40\6\35\46\3\6\35\46\43\6"+
    "\10\46\1\6\34\46\2\0\31\6\66\46\12\6\26\46"+
    "\12\6\23\46\15\6\22\46\156\6\111\46\67\6\63\46"+
    "\15\6\63\46\15\6\44\46\4\114\10\6\12\114\u0146\6"+
    "\52\113\1\6\2\0\3\6\2\113\116\6\35\46\12\6"+
    "\1\46\10\6\26\46\13\0\137\6\25\113\33\6\27\46"+
    "\11\6\3\114\65\46\16\114\1\0\37\6\12\114\17\6"+
    "\3\0\1\114\55\46\11\114\2\0\2\6\1\0\17\6"+
    "\1\0\2\6\31\46\7\6\12\114\6\6\3\114\44\46"+
    "\14\114\2\0\1\6\12\114\4\6\1\46\2\114\1\113"+
    "\10\6\43\46\1\0\2\6\1\46\11\6\3\114\60\46"+
    "\15\114\1\0\4\46\4\6\4\0\1\6\2\0\12\114"+
    "\1\46\1\6\1\46\43\6\22\46\1\6\31\46\11\114"+
    "\2\0\1\114\6\6\1\114\101\6\7\46\1\6\1\46"+
    "\1\6\4\46\1\6\17\46\1\6\12\46\7\6\57\46"+
    "\12\114\2\0\5\6\12\114\6\6\4\114\1\6\10\46"+
    "\2\6\2\46\2\6\26\46\1\6\7\46\1\6\2\46"+
    "\1\6\5\46\1\6\2\0\1\46\7\114\2\6\2\114"+
    "\2\6\2\114\1\0\2\6\1\46\6\6\1\114\5\6"+
    "\5\46\2\114\2\6\7\0\3\6\5\0\213\6\65\46"+
    "\15\114\1\0\3\114\1\0\4\46\5\6\12\114\4\6"+
    "\1\0\1\46\2\113\36\6\60\46\22\114\2\0\2\46"+
    "\1\6\1\46\10\6\12\114\246\6\57\46\7\114\2\6"+
    "\7\114\2\0\27\6\4\46\2\114\42\6\60\46\17\114"+
    "\1\0\1\114\3\6\1\46\13\6\12\114\46\6\53\46"+
    "\13\114\2\0\1\46\7\6\12\114\66\6\33\46\2\6"+
    "\16\114\1\0\4\6\12\114\306\6\54\46\15\114\2\0"+
    "\145\6\100\46\12\114\25\6\1\46\7\113\2\6\1\113"+
    "\2\6\10\113\1\6\2\113\1\6\30\113\6\0\1\6"+
    "\2\0\2\6\4\0\1\113\1\0\1\113\2\0\14\6"+
    "\12\0\106\6\10\46\2\6\47\46\7\114\2\6\6\114"+
    "\1\0\1\46\1\6\1\46\1\114\33\6\1\46\12\114"+
    "\50\46\2\0\5\114\1\46\4\114\10\6\1\0\10\6"+
    "\1\46\13\114\56\46\16\114\2\0\3\6\1\46\42\6"+
    "\71\46\7\6\11\46\1\6\45\46\10\114\1\6\7\114"+
    "\1\0\1\46\17\6\12\114\30\6\36\46\2\6\26\114"+
    "\1\6\16\114\111\6\7\46\1\6\2\46\1\6\46\46"+
    "\6\114\3\6\1\114\1\6\2\114\1\6\3\114\1\0"+
    "\1\114\2\0\1\46\1\114\10\6\12\114\6\6\6\46"+
    "\1\6\2\46\1\6\40\46\5\114\1\6\2\114\1\6"+
    "\4\114\1\0\1\46\7\6\12\114\u0136\6\23\46\4\114"+
    "\271\6\1\113\54\6\4\113\37\6\232\46\146\6\157\46"+
    "\21\6\304\46\274\6\57\46\1\6\11\0\307\6\107\46"+
    "\271\6\71\46\7\6\37\46\1\6\12\114\146\6\36\46"+
    "\2\6\5\0\13\6\60\46\7\0\11\6\4\46\14\6"+
    "\12\114\11\6\25\46\5\6\23\46\260\6\100\46\200\6"+
    "\113\46\4\6\1\114\1\46\67\114\7\6\4\114\15\46"+
    "\100\6\2\46\1\6\1\46\1\0\13\6\2\0\16\6"+
    "\370\46\10\6\363\46\u01e3\113\52\6\11\113\367\6\37\46"+
    "\61\6\3\46\21\6\4\46\10\6\u018c\46\4\6\153\46"+
    "\5\6\15\46\3\6\11\46\7\6\12\46\3\6\1\0"+
    "\1\114\1\6\4\0\301\6\5\0\3\6\26\0\2\6"+
    "\7\0\36\6\4\0\224\6\3\0\273\6\125\46\1\6"+
    "\107\46\1\6\2\46\2\6\1\46\2\6\2\46\2\6"+
    "\4\46\1\6\14\46\1\6\1\46\1\6\7\46\1\6"+
    "\101\46\1\6\4\46\2\6\10\46\1\6\7\46\1\6"+
    "\34\46\1\6\4\46\1\6\5\46\1\6\1\46\3\6"+
    "\7\46\1\6\u0154\46\2\6\31\46\1\6\31\46\1\6"+
    "\37\46\1\6\31\46\1\6\37\46\1\6\31\46\1\6"+
    "\37\46\1\6\31\46\1\6\37\46\1\6\31\46\1\6"+
    "\10\46\2\6\62\114\67\0\4\6\62\0\10\6\1\0"+
    "\16\6\1\0\26\6\5\0\1\6\17\0\120\6\7\114"+
    "\1\6\21\114\2\6\7\114\1\6\2\114\1\6\5\114"+
    "\325\6\55\46\3\6\7\0\7\46\2\6\12\114\4\6"+
    "\1\46\u0171\6\54\46\4\0\12\114\5\6\1\113\305\46"+
    "\13\6\7\0\51\6\104\46\3\0\1\114\3\0\1\46"+
    "\4\6\12\114\u0156\6\1\113\117\6\4\46\1\6\33\46"+
    "\1\6\2\46\1\6\1\46\2\6\1\46\1\6\12\46"+
    "\1\6\4\46\1\6\1\46\1\6\1\46\6\6\1\46"+
    "\4\6\1\46\1\6\1\46\1\6\1\46\1\6\3\46"+
    "\1\6\2\46\1\6\1\46\2\6\1\46\1\6\1\46"+
    "\1\6\1\46\1\6\1\46\1\6\1\46\1\6\2\46"+
    "\1\6\1\46\2\6\4\46\1\6\7\46\1\6\4\46"+
    "\1\6\4\46\1\6\1\46\1\6\12\46\1\6\21\46"+
    "\5\6\3\46\1\6\5\46\1\6\21\46\164\6\32\115"+
    "\6\6\32\115\6\6\32\115\u0166\6\12\0\6\6\327\46"+
    "\7\113\42\6\65\46\13\6\336\46\2\6\u0182\46\16\6"+
    "\u0131\46\37\6\36\46\342\6\113\113\266\6\1\0\36\6"+
    "\140\0\200\6\360\0\20\6";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[32256];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\3\0\1\1\15\0\1\2\5\0\1\1\1\3"+
    "\3\4\1\3\1\5\1\6\1\3\1\7\1\3\1\10"+
    "\1\11\1\3\2\12\1\13\1\14\1\15\1\3\1\1"+
    "\1\3\2\16\1\17\1\20\1\5\1\16\1\21\2\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\2\21\1\33\1\34\1\21\1\35\1\36\1\37\1\40"+
    "\1\41\1\4\3\3\1\42\1\43\1\4\2\44\1\45"+
    "\1\3\1\21\2\46\1\47\2\21\1\50\1\51\1\21"+
    "\1\52\3\21\1\3\1\53\1\54\1\55\1\4\1\56"+
    "\1\57\1\60\1\56\1\12\1\61\1\4\2\62\1\4"+
    "\1\63\1\2\1\64\1\65\1\66\4\0\1\67\1\0"+
    "\1\70\1\71\2\0\1\72\22\0\1\73\1\74\1\2"+
    "\1\0\1\75\1\76\1\77\4\0\1\100\1\101\4\0"+
    "\1\102\1\103\2\0\3\104\1\105\4\104\2\0\1\106"+
    "\1\0\1\107\7\0\6\4\1\110\1\46\1\111\1\112"+
    "\3\104\1\105\4\104\1\0\1\113\1\114\1\115\1\116"+
    "\1\117\1\12\1\4\36\0\1\120\17\0\1\121\2\0"+
    "\1\122\5\0\1\4\2\0\1\123\1\0\1\124\1\125"+
    "\1\0\1\126\1\127\1\12\1\4\13\0\1\130\12\0"+
    "\1\131\33\0\1\4\2\0\1\132\1\0\1\12\1\4"+
    "\1\0\1\133\1\134\4\0\1\135\11\0\1\136\2\0"+
    "\1\137\7\0\1\140\4\0\1\141\3\0\1\120\4\0"+
    "\1\142\11\0\3\4\1\0\1\12\1\4\1\143\4\0"+
    "\1\144\4\0\1\145\4\0\1\146\5\0\1\147\7\0"+
    "\1\150\1\0\1\76\4\0\1\151\12\0\1\4\2\0"+
    "\1\12\2\0\1\152\1\0\1\153\2\0\1\154\14\0"+
    "\1\155\4\0\1\76\1\77\4\0\1\156\11\0\1\4"+
    "\5\0\1\157\3\0\1\160\1\161\3\0\1\162\1\0"+
    "\1\163\1\164\1\165\2\0\1\166\1\0\1\77\1\0"+
    "\1\167\5\0\1\4\4\0\1\4\1\0\1\170\1\0"+
    "\1\171\1\172\1\173\1\174\1\175\15\0\1\4\3\0"+
    "\1\4\1\0\1\4\2\0\1\176\2\0\1\177\1\200"+
    "\2\0\1\201\6\0\4\4\1\202\1\203\1\204\1\205"+
    "\1\206\1\207\1\210\6\0\3\4\1\211\1\212\3\0"+
    "\1\4\2\0\1\4\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[599];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\117\0\236\0\355\0\u013c\0\u018b\0\u01da\0\u0229"+
    "\0\u0278\0\u02c7\0\u0316\0\u0365\0\u03b4\0\u0403\0\u0452\0\u04a1"+
    "\0\u04f0\0\u053f\0\u058e\0\u05dd\0\u062c\0\u067b\0\u06ca\0\u0719"+
    "\0\u0768\0\u07b7\0\u0806\0\u0855\0\u08a4\0\u0806\0\u08f3\0\u0942"+
    "\0\u0991\0\u09e0\0\u0a2f\0\u0806\0\u0806\0\u0a7e\0\u0acd\0\u0b1c"+
    "\0\u0806\0\u0806\0\u0806\0\u0b6b\0\u0bba\0\u0c09\0\u0806\0\u0c58"+
    "\0\u0ca7\0\u0806\0\u0cf6\0\u0d45\0\u0806\0\u0d94\0\u0de3\0\u0806"+
    "\0\u0806\0\u0806\0\u0806\0\u0806\0\u0806\0\u0806\0\u0e32\0\u0e81"+
    "\0\u0ed0\0\u0806\0\u0f1f\0\u0f6e\0\u0806\0\u0fbd\0\u0806\0\u0806"+
    "\0\u100c\0\u105b\0\u10aa\0\u10f9\0\u1148\0\u0806\0\u0806\0\u1197"+
    "\0\u0806\0\u11e6\0\u0806\0\u1235\0\u1284\0\u1284\0\u12d3\0\u0806"+
    "\0\u1322\0\u1371\0\u1284\0\u0f1f\0\u13c0\0\u0806\0\u140f\0\u145e"+
    "\0\u14ad\0\u1284\0\u0806\0\u0806\0\u0806\0\u14fc\0\u0806\0\u154b"+
    "\0\u0806\0\u159a\0\u15e9\0\u0806\0\u1638\0\u0806\0\u1687\0\u16d6"+
    "\0\u0806\0\u1725\0\u1774\0\u0806\0\u17c3\0\u0806\0\u1812\0\u1861"+
    "\0\u18b0\0\u0806\0\u0855\0\u0806\0\u0806\0\u08a4\0\u0991\0\u0806"+
    "\0\u18ff\0\u194e\0\u199d\0\u19ec\0\u1a3b\0\u1a8a\0\u1ad9\0\u1b28"+
    "\0\u1b77\0\u1bc6\0\u1c15\0\u1c64\0\u1cb3\0\u1d02\0\u1d51\0\u1da0"+
    "\0\u1def\0\u1e3e\0\u0806\0\u0806\0\u1e8d\0\u1edc\0\u0806\0\u1f2b"+
    "\0\u1f7a\0\u1fc9\0\u2018\0\u2067\0\u20b6\0\u0806\0\u0806\0\u2105"+
    "\0\u0d45\0\u2154\0\u0d94\0\u0806\0\u0806\0\u21a3\0\u21f2\0\u0806"+
    "\0\u2241\0\u2290\0\u0806\0\u22df\0\u232e\0\u237d\0\u23cc\0\u0fbd"+
    "\0\u241b\0\u246a\0\u100c\0\u0806\0\u10aa\0\u10f9\0\u1148\0\u24b9"+
    "\0\u2508\0\u2557\0\u25a6\0\u25f5\0\u2644\0\u2693\0\u26e2\0\u2731"+
    "\0\u2780\0\u27cf\0\u0806\0\u0806\0\u27cf\0\u281e\0\u286d\0\u28bc"+
    "\0\u281e\0\u290b\0\u295a\0\u29a9\0\u29f8\0\u2a47\0\u0806\0\u0806"+
    "\0\u2a96\0\u0806\0\u0806\0\u2ae5\0\u2b34\0\u2b83\0\u2bd2\0\u2c21"+
    "\0\u2c70\0\u2cbf\0\u2d0e\0\u2d5d\0\u2dac\0\u2dfb\0\u2e4a\0\u2e99"+
    "\0\u2ee8\0\u2f37\0\u2f86\0\u2fd5\0\u3024\0\u3073\0\u30c2\0\u3111"+
    "\0\u3160\0\u31af\0\u31fe\0\u324d\0\u329c\0\u32eb\0\u333a\0\u3389"+
    "\0\u33d8\0\u3427\0\u3476\0\u34c5\0\u3514\0\u3563\0\u35b2\0\u3601"+
    "\0\u3650\0\u369f\0\u36ee\0\u373d\0\u378c\0\u37db\0\u382a\0\u3879"+
    "\0\u38c8\0\u3917\0\u3966\0\u0806\0\u39b5\0\u3a04\0\u0806\0\u3a53"+
    "\0\u3aa2\0\u3af1\0\u3b40\0\u3b8f\0\u3bde\0\u3c2d\0\u3c7c\0\u0806"+
    "\0\u3ccb\0\u0806\0\u3d1a\0\u3d69\0\u0806\0\u0806\0\u3db8\0\u3e07"+
    "\0\u3e56\0\u3ea5\0\u3ef4\0\u3f43\0\u3f92\0\u3fe1\0\u4030\0\u407f"+
    "\0\u40ce\0\u411d\0\u416c\0\u41bb\0\u420a\0\u4259\0\u42a8\0\u42f7"+
    "\0\u4346\0\u4395\0\u43e4\0\u4433\0\u4482\0\u44d1\0\u4520\0\u456f"+
    "\0\u45be\0\u460d\0\u465c\0\u46ab\0\u46fa\0\u4749\0\u4798\0\u47e7"+
    "\0\u4836\0\u4885\0\u48d4\0\u4923\0\u4972\0\u49c1\0\u4a10\0\u4a5f"+
    "\0\u4aae\0\u4afd\0\u4b4c\0\u4b9b\0\u4bea\0\u4c39\0\u23cc\0\u4c88"+
    "\0\u4cd7\0\u4d26\0\u4d75\0\u4dc4\0\u2780\0\u0806\0\u4e13\0\u4e62"+
    "\0\u4eb1\0\u4f00\0\u0806\0\u0806\0\u4f4f\0\u4f9e\0\u4fed\0\u503c"+
    "\0\u0806\0\u508b\0\u50da\0\u5129\0\u5178\0\u51c7\0\u5216\0\u5265"+
    "\0\u52b4\0\u5303\0\u0806\0\u5352\0\u53a1\0\u0806\0\u53f0\0\u543f"+
    "\0\u548e\0\u54dd\0\u552c\0\u557b\0\u55ca\0\u0806\0\u5619\0\u5668"+
    "\0\u56b7\0\u5706\0\u0806\0\u5755\0\u57a4\0\u57f3\0\u4836\0\u5842"+
    "\0\u5891\0\u58e0\0\u592f\0\u0806\0\u597e\0\u59cd\0\u5a1c\0\u5a6b"+
    "\0\u5aba\0\u5b09\0\u5b58\0\u5ba7\0\u5bf6\0\u5c45\0\u5c94\0\u5ce3"+
    "\0\u5d32\0\u5d81\0\u3ccb\0\u0806\0\u5dd0\0\u5e1f\0\u5e6e\0\u5ebd"+
    "\0\u0806\0\u5f0c\0\u5f5b\0\u5faa\0\u5ff9\0\u0806\0\u6048\0\u6097"+
    "\0\u60e6\0\u6135\0\u0806\0\u6184\0\u61d3\0\u6222\0\u6271\0\u62c0"+
    "\0\u0806\0\u630f\0\u635e\0\u63ad\0\u63fc\0\u644b\0\u649a\0\u64e9"+
    "\0\u0806\0\u6538\0\u6587\0\u65d6\0\u6625\0\u6674\0\u66c3\0\u0806"+
    "\0\u6712\0\u6761\0\u67b0\0\u67ff\0\u684e\0\u689d\0\u68ec\0\u693b"+
    "\0\u698a\0\u69d9\0\u6a28\0\u6a77\0\u6ac6\0\u0806\0\u6b15\0\u6b64"+
    "\0\u0806\0\u6bb3\0\u0806\0\u6c02\0\u6c51\0\u0806\0\u6ca0\0\u6cef"+
    "\0\u6d3e\0\u6d8d\0\u6ddc\0\u6e2b\0\u6e7a\0\u6ec9\0\u6f18\0\u6f67"+
    "\0\u6fb6\0\u7005\0\u0806\0\u7054\0\u70a3\0\u70f2\0\u7141\0\u0806"+
    "\0\u7190\0\u71df\0\u722e\0\u727d\0\u72cc\0\u0806\0\u731b\0\u736a"+
    "\0\u73b9\0\u7408\0\u7457\0\u74a6\0\u74f5\0\u7544\0\u7593\0\u75e2"+
    "\0\u7631\0\u7680\0\u76cf\0\u771e\0\u776d\0\u0806\0\u77bc\0\u780b"+
    "\0\u785a\0\u0806\0\u0806\0\u78a9\0\u78f8\0\u7947\0\u0806\0\u7996"+
    "\0\u0806\0\u0806\0\u0806\0\u79e5\0\u7a34\0\u0806\0\u7a83\0\u0806"+
    "\0\u7ad2\0\u0806\0\u7b21\0\u7b70\0\u7bbf\0\u7c0e\0\u7c5d\0\u7cac"+
    "\0\u7cfb\0\u7d4a\0\u7d99\0\u7de8\0\u7e37\0\u7e86\0\u0806\0\u7ed5"+
    "\0\u0806\0\u0806\0\u0806\0\u7f24\0\u0806\0\u7f73\0\u7fc2\0\u8011"+
    "\0\u8060\0\u80af\0\u80fe\0\u814d\0\u819c\0\u81eb\0\u823a\0\u8289"+
    "\0\u82d8\0\u8327\0\u8376\0\u83c5\0\u8414\0\u8463\0\u84b2\0\u8501"+
    "\0\u8550\0\u859f\0\u85ee\0\u0806\0\u863d\0\u868c\0\u86db\0\u0806"+
    "\0\u872a\0\u8779\0\u0806\0\u87c8\0\u8817\0\u8866\0\u88b5\0\u8904"+
    "\0\u8953\0\u89a2\0\u89f1\0\u8a40\0\u8a8f\0\u0806\0\u0806\0\u0806"+
    "\0\u0806\0\u0806\0\u8ade\0\u0806\0\u8b2d\0\u8b7c\0\u8bcb\0\u8c1a"+
    "\0\u8c69\0\u8cb8\0\u8d07\0\u8d56\0\u8da5\0\u0806\0\u0806\0\u8df4"+
    "\0\u8e43\0\u8e92\0\u8ee1\0\u8f30\0\u8f7f\0\u8fce\0\u901d";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[599];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\12\31\1\32\104\31\17\33\1\34\4\33\1\35\72\33"+
    "\1\36\2\37\3\40\2\36\1\41\1\42\1\43\6\36"+
    "\1\44\1\36\1\45\1\46\1\47\7\50\1\36\1\51"+
    "\1\52\1\53\1\36\11\42\4\36\27\42\4\36\1\40"+
    "\1\42\4\36\2\37\3\40\2\36\1\41\1\42\1\54"+
    "\6\36\1\44\1\36\1\45\1\46\1\47\7\50\1\36"+
    "\1\51\1\52\1\53\1\36\11\42\4\36\27\42\4\36"+
    "\1\40\1\42\3\36\12\55\1\56\104\55\1\57\2\37"+
    "\3\40\16\57\1\60\11\57\1\61\51\57\1\62\1\57"+
    "\1\40\3\57\1\36\1\57\2\63\3\40\4\57\1\64"+
    "\11\57\1\60\11\57\1\61\51\57\1\62\1\57\1\40"+
    "\3\57\1\36\1\57\2\37\3\40\104\57\1\40\3\57"+
    "\1\36\1\65\2\37\2\66\1\67\1\65\1\70\1\71"+
    "\1\72\3\65\1\73\1\74\1\75\1\76\2\65\1\45"+
    "\1\77\10\100\1\65\1\101\2\65\1\102\11\100\1\103"+
    "\1\104\1\65\1\105\27\100\1\106\1\107\1\65\1\110"+
    "\1\66\1\65\2\100\2\36\2\37\3\40\3\36\1\42"+
    "\7\36\1\44\16\36\1\111\1\36\11\42\4\36\27\42"+
    "\4\36\1\40\1\42\3\36\10\112\1\113\3\112\1\114"+
    "\7\112\1\115\61\112\1\116\1\112\1\117\6\112\3\120"+
    "\2\121\1\122\2\120\1\123\43\120\1\124\35\120\1\121"+
    "\4\120\3\125\2\126\1\127\2\125\1\130\2\125\1\131"+
    "\6\125\1\132\2\125\10\133\5\125\11\133\1\134\1\135"+
    "\1\136\1\105\27\133\1\137\1\140\1\125\1\141\1\126"+
    "\1\125\2\133\1\142\1\143\2\37\3\36\3\143\1\42"+
    "\7\143\1\44\3\143\10\47\5\143\11\42\4\143\27\42"+
    "\2\143\1\144\1\143\1\36\1\42\2\143\1\36\25\145"+
    "\10\146\5\145\11\146\4\145\27\146\6\145\2\146\1\145"+
    "\3\147\3\36\14\147\1\150\2\147\10\151\5\147\11\151"+
    "\1\147\1\152\2\147\27\151\4\147\1\36\1\147\2\151"+
    "\2\36\2\37\3\40\17\36\10\153\5\36\4\153\11\36"+
    "\6\153\23\36\1\154\1\36\1\40\5\36\2\155\2\156"+
    "\1\157\17\36\10\160\5\36\4\160\11\36\6\160\23\36"+
    "\1\161\1\36\1\156\4\36\3\162\3\163\104\162\1\163"+
    "\3\162\1\36\1\143\2\37\3\40\104\143\1\40\3\143"+
    "\1\36\117\164\106\36\1\165\10\36\3\0\2\166\1\167"+
    "\104\0\1\166\13\0\3\170\3\0\4\170\2\0\2\170"+
    "\14\0\1\170\11\0\2\170\1\0\1\170\27\0\2\170"+
    "\1\0\1\170\5\0\12\31\1\171\116\31\1\172\104\31"+
    "\136\0\1\173\4\0\1\174\111\0\1\175\4\0\1\176"+
    "\73\0\2\37\117\0\3\40\104\0\1\40\4\0\3\177"+
    "\3\0\2\177\1\200\43\177\1\201\35\177\1\0\4\177"+
    "\2\42\7\0\1\42\13\0\10\42\5\0\11\42\4\0"+
    "\27\42\4\0\3\42\30\0\1\202\3\0\1\203\1\204"+
    "\23\0\1\205\1\206\1\207\1\210\1\211\1\212\2\0"+
    "\1\213\1\0\1\214\1\0\1\215\1\0\1\216\1\0"+
    "\1\217\1\220\1\221\3\0\1\222\1\223\27\0\1\224"+
    "\4\0\1\225\117\0\10\47\105\0\1\226\1\0\10\50"+
    "\74\0\1\227\13\0\1\202\3\0\1\203\1\204\23\0"+
    "\1\205\1\206\1\207\1\210\1\211\1\212\2\0\1\213"+
    "\1\0\1\214\1\0\1\215\1\0\1\216\1\0\1\230"+
    "\1\220\1\221\2\0\1\231\1\222\1\223\10\0\12\55"+
    "\1\232\167\55\1\233\3\55\1\234\15\55\1\235\2\55"+
    "\1\236\6\55\17\0\1\237\4\0\1\225\130\0\1\240"+
    "\61\0\2\63\7\0\1\241\173\0\1\242\30\0\5\243"+
    "\1\0\3\244\3\0\4\244\2\0\2\244\14\0\1\244"+
    "\11\0\2\244\1\0\1\244\27\0\2\244\1\0\1\244"+
    "\1\243\5\0\2\243\1\66\2\243\1\0\3\244\3\0"+
    "\4\244\2\0\2\244\14\0\1\244\11\0\2\244\1\0"+
    "\1\244\27\0\2\244\1\0\1\244\1\243\23\0\1\245"+
    "\4\0\1\225\117\0\10\100\5\0\11\100\4\0\27\100"+
    "\6\0\2\100\37\0\1\246\115\0\1\247\61\0\3\250"+
    "\3\0\17\250\3\251\3\252\10\250\1\253\4\250\1\254"+
    "\1\253\1\255\7\250\1\253\12\250\1\254\1\250\1\253"+
    "\1\250\1\256\1\250\1\253\1\257\5\250\1\0\3\250"+
    "\2\0\2\260\6\0\1\261\13\0\10\262\5\0\11\261"+
    "\4\0\27\261\5\0\1\261\4\0\5\263\100\0\1\264"+
    "\3\0\1\263\4\0\10\112\1\265\3\112\1\266\7\112"+
    "\1\267\61\112\1\0\1\112\1\0\6\112\3\265\3\0"+
    "\2\265\1\112\43\265\1\270\35\265\1\0\4\265\3\271"+
    "\3\0\6\271\1\0\37\271\1\272\35\271\1\0\4\271"+
    "\17\112\1\273\4\112\1\274\72\112\3\120\3\0\2\120"+
    "\1\0\43\120\1\0\35\120\1\0\4\120\3\0\1\121"+
    "\113\0\3\33\3\0\17\33\3\275\3\276\17\33\1\277"+
    "\26\33\1\300\2\33\1\301\5\33\1\0\3\33\23\0"+
    "\1\302\77\0\1\303\16\0\1\302\107\0\1\304\6\0"+
    "\1\302\116\0\1\305\74\0\3\306\3\0\17\306\3\307"+
    "\3\310\10\306\1\311\4\306\1\312\1\311\1\313\7\306"+
    "\1\311\12\306\1\312\1\306\1\311\1\306\1\314\1\306"+
    "\1\311\1\315\5\306\1\0\3\306\12\0\1\316\10\0"+
    "\1\302\17\0\11\316\4\0\27\316\5\0\1\316\25\0"+
    "\1\302\64\0\1\317\31\0\1\302\66\0\1\320\27\0"+
    "\1\321\151\0\1\322\41\0\3\323\3\0\104\323\1\0"+
    "\3\323\26\0\10\324\5\0\4\324\11\0\6\324\33\0"+
    "\2\155\117\0\1\156\140\0\10\325\5\0\4\325\11\0"+
    "\6\325\32\0\3\162\3\0\104\162\1\0\3\162\4\0"+
    "\3\163\104\0\1\163\5\0\2\326\6\0\1\261\30\0"+
    "\11\261\4\0\27\261\1\327\4\0\1\261\6\0\1\166"+
    "\114\0\5\170\104\0\1\170\4\0\12\31\1\0\104\31"+
    "\3\177\3\0\104\177\1\0\4\177\31\0\1\330\145\0"+
    "\1\331\116\0\1\332\116\0\1\333\14\0\1\334\122\0"+
    "\1\335\74\0\1\336\6\0\1\337\2\0\1\340\2\0"+
    "\1\341\3\0\1\342\1\343\100\0\1\344\127\0\1\345"+
    "\7\0\1\346\101\0\1\347\11\0\1\350\102\0\1\351"+
    "\4\0\1\352\1\353\112\0\1\354\123\0\1\355\123\0"+
    "\1\356\76\0\1\357\16\0\1\360\123\0\1\361\104\0"+
    "\1\362\130\0\1\363\11\0\3\225\3\0\104\225\1\0"+
    "\4\225\25\0\10\364\143\0\1\357\16\0\1\365\115\0"+
    "\1\366\17\0\63\55\1\0\3\55\1\0\15\55\1\0"+
    "\2\55\1\0\6\55\74\0\1\367\115\0\1\370\130\0"+
    "\1\371\55\0\1\372\145\0\1\373\67\0\1\374\134\0"+
    "\1\375\5\0\1\376\1\377\7\0\1\u0100\42\0\6\252"+
    "\111\0\6\250\172\0\1\u0101\35\0\10\u0102\5\0\4\u0102"+
    "\11\0\6\u0102\57\0\10\u0103\5\0\4\u0103\11\0\6\u0103"+
    "\21\0\1\u0104\35\0\10\u0105\5\0\4\u0105\11\0\6\u0105"+
    "\32\0\2\261\1\u0106\6\0\1\261\13\0\10\261\5\0"+
    "\11\261\4\0\27\261\2\0\1\u0107\1\0\3\261\27\0"+
    "\10\262\62\0\3\265\3\0\104\265\1\0\4\265\14\0"+
    "\1\112\102\0\3\271\3\0\17\271\3\u0108\3\u0109\21\271"+
    "\1\u010a\24\271\1\u010b\10\271\1\0\4\271\17\273\1\u010c"+
    "\77\273\3\274\3\112\16\274\1\u010d\65\274\1\112\4\274"+
    "\25\0\6\276\111\0\6\33\111\0\10\u010e\5\0\4\u010e"+
    "\11\0\6\u010e\57\0\10\u010f\5\0\4\u010f\11\0\6\u010f"+
    "\21\0\1\u0110\35\0\10\u0111\5\0\4\u0111\11\0\6\u0111"+
    "\54\0\1\u0112\116\0\1\u0113\116\0\1\u0113\2\0\6\252"+
    "\106\0\1\u0113\2\0\6\250\106\0\1\u0113\63\0\1\u0101"+
    "\32\0\1\u0113\2\0\10\u0102\5\0\4\u0102\11\0\6\u0102"+
    "\54\0\1\u0113\2\0\10\u0103\5\0\4\u0103\11\0\6\u0103"+
    "\21\0\1\u0114\32\0\1\u0113\2\0\10\u0105\5\0\4\u0105"+
    "\11\0\6\u0105\32\0\2\316\7\0\1\316\13\0\10\316"+
    "\5\0\11\316\4\0\27\316\2\0\1\u0115\1\0\3\316"+
    "\24\0\1\u0116\121\0\10\u0117\5\0\4\u0117\11\0\6\u0117"+
    "\57\0\10\u0118\5\0\4\u0118\11\0\6\u0118\33\0\2\326"+
    "\6\0\1\261\30\0\11\261\4\0\27\261\5\0\1\261"+
    "\4\0\2\327\22\0\10\262\142\0\1\u0119\125\0\1\u011a"+
    "\116\0\1\u011b\126\0\1\u011c\106\0\1\u011d\113\0\1\u011e"+
    "\131\0\1\u011f\76\0\1\u0120\116\0\1\u0121\130\0\1\u0122"+
    "\121\0\1\u0123\117\0\1\u0124\101\0\1\u0125\122\0\1\u0126"+
    "\132\0\1\u0127\111\0\1\u0128\114\0\1\u0129\1\0\1\u012a"+
    "\116\0\1\u012b\120\0\1\u012c\102\0\1\u012d\5\0\1\u012e"+
    "\10\0\1\u012f\111\0\1\u0130\123\0\1\u0131\76\0\1\u0132"+
    "\115\0\1\u0133\116\0\1\u0134\134\0\1\u0135\110\0\1\u0136"+
    "\112\0\1\u0137\5\0\1\u0138\50\0\1\u0139\1\0\10\364"+
    "\141\0\1\u013a\137\0\1\u013b\102\0\1\u013c\121\0\1\u013d"+
    "\120\0\1\u013e\74\0\1\u013f\130\0\1\u012d\104\0\1\u0140"+
    "\136\0\1\u0141\120\0\1\u0142\110\0\1\u0143\10\0\1\u0144"+
    "\117\0\1\u0145\21\0\110\u0101\1\253\6\u0101\25\0\10\u0146"+
    "\5\0\4\u0146\11\0\6\u0146\57\0\10\u0147\5\0\4\u0147"+
    "\11\0\6\u0147\57\0\10\250\5\0\4\250\11\0\6\250"+
    "\33\0\2\u0106\105\0\1\u0107\22\0\1\112\10\0\6\u0109"+
    "\100\0\1\112\10\0\6\271\100\0\1\112\37\0\1\u0148"+
    "\24\0\1\u0149\31\0\1\112\10\0\10\u014a\5\0\4\u014a"+
    "\11\0\6\u014a\32\0\17\273\1\u010c\4\273\1\112\72\273"+
    "\3\274\3\112\11\274\1\u014b\4\274\1\u010d\65\274\1\112"+
    "\4\274\25\0\10\u014c\5\0\4\u014c\11\0\6\u014c\57\0"+
    "\10\u014d\5\0\4\u014d\11\0\6\u014d\57\0\10\33\5\0"+
    "\4\33\11\0\6\33\54\0\1\u014e\121\0\10\u014f\5\0"+
    "\4\u014f\11\0\6\u014f\57\0\10\u0150\5\0\4\u0150\11\0"+
    "\6\u0150\57\0\10\u0151\5\0\4\u0151\11\0\6\u0151\121\0"+
    "\1\u0152\127\0\1\u0153\116\0\1\u0154\116\0\1\u0155\113\0"+
    "\1\u0156\105\0\1\u0157\115\0\1\u0158\131\0\1\u0159\117\0"+
    "\1\u015a\120\0\1\u015b\113\0\1\u015c\102\0\1\u015d\14\0"+
    "\1\u015e\120\0\1\u015f\76\0\1\u0160\16\0\1\u0161\1\0"+
    "\1\u0162\3\0\1\u0163\73\0\1\u0164\112\0\1\u0165\130\0"+
    "\1\u0166\106\0\1\u0167\131\0\1\u0168\113\0\1\u0169\116\0"+
    "\1\u016a\125\0\1\u016b\101\0\1\u016c\17\0\1\u016d\76\0"+
    "\1\u016e\134\0\1\u016f\106\0\1\u0170\120\0\1\u0171\116\0"+
    "\1\u0172\106\0\1\u0173\114\0\1\u0174\131\0\1\u0175\105\0"+
    "\1\u0176\60\0\10\u0177\155\0\1\u0172\4\0\1\u0178\75\0"+
    "\1\u0179\137\0\1\u017a\1\0\1\u017b\5\0\1\u017c\106\0"+
    "\1\u017d\101\0\1\u017e\100\0\1\u017f\116\0\1\u0180\136\0"+
    "\1\u0181\114\0\1\u0182\133\0\1\u0183\121\0\1\u0184\110\0"+
    "\1\u0184\46\0\10\u0103\5\0\4\u0103\11\0\6\u0103\106\0"+
    "\1\u0148\24\0\1\u0149\42\0\10\u014a\5\0\4\u014a\11\0"+
    "\6\u014a\57\0\10\u0185\5\0\4\u0185\11\0\6\u0185\32\0"+
    "\3\u014b\3\u0186\11\u014b\1\u0187\4\u014b\1\u0188\65\u014b\1\u0186"+
    "\4\u014b\25\0\10\u010f\5\0\4\u010f\11\0\6\u010f\57\0"+
    "\10\u0189\5\0\4\u0189\11\0\6\u0189\23\0\1\65\33\0"+
    "\10\u018a\5\0\4\u018a\11\0\6\u018a\57\0\10\u018b\5\0"+
    "\4\u018b\11\0\6\u018b\132\0\1\u018c\114\0\1\u018d\116\0"+
    "\1\u018e\103\0\1\u018f\124\0\1\u0190\124\0\1\u0191\111\0"+
    "\1\u0192\103\0\1\u0193\122\0\1\u0194\140\0\1\u0195\76\0"+
    "\1\u0196\122\0\1\u0197\113\0\1\u0198\107\0\1\u0199\132\0"+
    "\1\u019a\114\0\1\u019b\125\0\1\u019c\114\0\1\u019d\103\0"+
    "\1\u019e\134\0\1\u019f\115\0\1\u01a0\5\0\1\u01a1\75\0"+
    "\1\u01a2\127\0\1\u01a3\113\0\1\u01a4\112\0\1\u01a5\112\0"+
    "\1\u01a6\115\0\1\u01a7\130\0\1\u01a8\106\0\1\u01a9\136\0"+
    "\1\u01aa\75\0\1\u01ab\133\0\1\u01ac\104\0\1\u01ad\107\0"+
    "\1\u01ae\137\0\1\u01af\7\0\1\u01b0\112\0\1\u01b1\52\0"+
    "\1\u01b2\116\0\1\u01b3\145\0\1\u01b4\127\0\1\u01b5\116\0"+
    "\1\u01b6\101\0\1\u01b7\60\0\10\u01b8\5\0\4\u01b8\11\0"+
    "\6\u01b8\32\0\10\u0186\1\u01b9\3\u0186\1\u01ba\2\u0186\1\u01bb"+
    "\4\u0186\1\u01bc\61\u0186\1\273\1\u0186\1\273\6\u0186\3\u014b"+
    "\3\u0186\11\u014b\1\u0187\4\u014b\1\u010d\65\u014b\1\u0186\7\u014b"+
    "\3\u0186\16\u014b\1\u0188\65\u014b\1\u0186\4\u014b\25\0\10\u01bd"+
    "\5\0\4\u01bd\11\0\6\u01bd\23\0\1\65\33\0\10\u01be"+
    "\5\0\4\u01be\11\0\6\u01be\111\0\1\u01bf\126\0\1\u01c0"+
    "\125\0\1\u01c1\103\0\1\u01c2\126\0\1\u01c3\121\0\1\u01c4"+
    "\100\0\1\u01c5\130\0\1\u01c6\120\0\1\u01c7\120\0\1\u01c8"+
    "\111\0\1\u01c9\107\0\1\u01ca\123\0\1\u01cb\112\0\1\u01cc"+
    "\125\0\1\u01cd\106\0\1\u01ce\122\0\1\u01cf\113\0\1\u01d0"+
    "\112\0\1\u01d1\126\0\1\u01d2\110\0\1\u01d3\133\0\1\u01d4"+
    "\77\0\1\u01d5\121\0\1\u01d6\134\0\1\u01d7\115\0\1\u01d8"+
    "\102\0\1\u01d9\131\0\1\u01da\111\0\1\u01db\113\0\1\u01dc"+
    "\130\0\1\u01dd\56\0\1\57\116\0\1\u01de\156\0\1\u01df"+
    "\116\0\1\u01e0\101\0\1\u01e1\131\0\1\u01e2\45\0\10\271"+
    "\5\0\4\271\11\0\6\271\32\0\3\u01b9\3\273\2\u01b9"+
    "\1\u0186\6\u01b9\1\u01e3\34\u01b9\1\u01e4\35\u01b9\1\273\4\u01b9"+
    "\3\u01e5\3\273\6\u01e5\1\273\2\u01e5\1\u01e6\34\u01e5\1\u01e7"+
    "\35\u01e5\1\273\4\u01e5\10\u0186\1\u01b9\3\u0186\1\u01ba\2\u0186"+
    "\1\u01bb\4\u0186\1\u01e8\61\u0186\1\273\1\u0186\1\273\25\u0186"+
    "\1\u01e9\4\u0186\1\u014b\72\u0186\25\0\10\u01ea\5\0\4\u01ea"+
    "\11\0\6\u01ea\23\0\1\65\67\0\1\u01eb\137\0\1\u01ec"+
    "\113\0\1\u01ed\104\0\1\u01ee\132\0\1\u01ef\114\0\1\u01f0"+
    "\113\0\1\u01f1\130\0\1\u01f2\107\0\1\u01f3\113\0\1\u01f4"+
    "\103\0\1\u01f5\120\0\1\u01f6\116\0\1\u01f7\131\0\1\u01f8"+
    "\116\0\1\u01f9\115\0\1\u01fa\125\0\1\u01fb\110\0\1\u01fc"+
    "\111\0\1\u01fd\110\0\1\u01fe\121\0\1\u01ff\127\0\1\u0200"+
    "\113\0\1\u0201\132\0\1\u0202\104\0\1\u0203\106\0\1\u0204"+
    "\65\0\1\u0205\144\0\1\u0206\131\0\1\u01df\101\0\1\u0207"+
    "\35\0\3\u01b9\3\273\2\u01b9\1\u0186\6\u01b9\1\u01e3\4\u01b9"+
    "\1\u0208\27\u01b9\1\u01e4\35\u01b9\1\273\7\u01b9\3\273\11\u01b9"+
    "\1\u01e3\72\u01b9\1\273\4\u01b9\14\273\1\u0186\2\273\1\u010c"+
    "\113\273\1\u0186\2\273\1\u010c\4\273\1\112\72\273\3\u01e5"+
    "\3\273\11\u01e5\1\u01e6\5\u01e5\3\u0209\3\u020a\21\u01e5\1\u020b"+
    "\24\u01e5\1\u020c\10\u01e5\1\273\4\u01e5\10\112\1\u0208\3\112"+
    "\1\u020d\2\112\1\u0186\4\112\1\u010d\72\112\17\273\1\u010c"+
    "\4\273\1\u0186\72\273\25\0\10\u020e\5\0\4\u020e\11\0"+
    "\6\u020e\23\0\1\65\106\0\1\u020f\75\0\1\u0210\136\0"+
    "\1\u0211\104\0\1\u0212\114\0\1\u0213\136\0\1\u0214\106\0"+
    "\1\u0215\102\0\1\u0216\132\0\1\u0217\117\0\1\u0218\116\0"+
    "\1\u0219\116\0\1\u021a\120\0\1\u021b\123\0\1\u021c\107\0"+
    "\1\u021d\120\0\1\u021e\75\0\1\253\137\0\1\u021f\77\0"+
    "\1\u0220\37\0\3\u0208\3\112\6\u0208\1\u0221\7\u0208\1\u0222"+
    "\27\u0208\1\u0223\31\u0208\1\265\1\u0208\1\265\1\u0208\1\112"+
    "\4\u0208\14\273\1\u0186\2\273\1\u010c\5\273\6\u020a\100\273"+
    "\1\u0186\2\273\1\u010c\5\273\6\u01e5\100\273\1\u0186\2\273"+
    "\1\u010c\34\273\1\u0224\24\273\1\u0225\31\273\1\u0186\2\273"+
    "\1\u010c\5\273\10\u0226\5\273\4\u0226\11\273\6\u0226\32\273"+
    "\3\u0227\3\112\2\u0227\1\u0228\3\u0227\1\266\7\u0227\1\267"+
    "\27\u0227\1\u0229\31\u0227\1\271\1\u0227\1\271\1\u0227\1\112"+
    "\4\u0227\25\0\10\u022a\5\0\4\u022a\11\0\6\u022a\23\0"+
    "\1\65\106\0\1\u022b\124\0\1\u022c\107\0\1\u022d\117\0"+
    "\1\u022e\121\0\1\u022f\111\0\1\u0230\113\0\1\u0231\117\0"+
    "\1\u0232\132\0\1\u0233\111\0\1\u0234\107\0\1\u0235\57\0"+
    "\1\u0205\24\0\1\375\133\0\1\u0236\17\0\3\u0228\3\0"+
    "\2\u0228\1\u0227\3\u0228\1\265\37\u0228\1\u0237\35\u0228\1\0"+
    "\4\u0228\3\u0208\3\112\2\u0208\1\112\6\u0208\1\u01b9\4\u0208"+
    "\1\274\27\u0208\1\u0223\35\u0208\1\112\7\u0208\3\112\2\u0208"+
    "\1\265\3\u0208\1\u0221\7\u0208\1\u0222\61\u0208\1\265\1\u0208"+
    "\1\265\1\u0208\1\112\4\u0208\17\273\1\u010c\34\273\1\u0224"+
    "\24\273\1\u0225\34\273\1\u010c\5\273\10\u0226\5\273\4\u0226"+
    "\11\273\6\u0226\51\273\1\u010c\5\273\10\u0238\5\273\4\u0238"+
    "\11\273\6\u0238\32\273\10\112\1\265\3\112\1\u020d\7\112"+
    "\1\267\61\112\1\0\1\112\1\0\6\112\3\265\3\0"+
    "\2\265\1\112\3\265\1\u0208\37\265\1\270\35\265\1\0"+
    "\4\265\3\u0227\3\112\2\u0227\1\u0228\3\u0227\1\u0239\7\u0227"+
    "\1\267\3\u023a\3\u023b\21\u0227\1\u023c\24\u0227\1\u023d\4\u0227"+
    "\1\271\1\u0227\1\271\1\u0227\1\112\4\u0227\110\0\1\65"+
    "\71\0\1\u023e\116\0\1\u023f\132\0\1\u0240\125\0\1\u0241"+
    "\73\0\1\u0242\136\0\1\u0243\123\0\1\u0244\111\0\1\u0245"+
    "\76\0\1\u01df\33\0\3\u0228\3\0\17\u0228\3\u0246\3\u0247"+
    "\21\u0228\1\u0248\24\u0228\1\u0249\10\u0228\1\0\4\u0228\17\273"+
    "\1\u010c\5\273\10\u024a\5\273\4\u024a\11\273\6\u024a\32\273"+
    "\3\271\3\0\6\271\1\112\37\271\1\272\35\271\1\0"+
    "\4\271\10\112\1\265\3\112\1\u020d\7\112\1\267\6\u023b"+
    "\53\112\1\0\1\112\1\0\16\112\1\265\3\112\1\u020d"+
    "\7\112\1\267\6\u0227\53\112\1\0\1\112\1\0\16\112"+
    "\1\265\3\112\1\u020d\7\112\1\267\27\112\1\u024b\24\112"+
    "\1\u024c\4\112\1\0\1\112\1\0\16\112\1\265\3\112"+
    "\1\u020d\7\112\1\267\10\u024d\5\112\4\u024d\11\112\6\u024d"+
    "\21\112\1\0\1\112\1\0\6\112\106\0\1\u024e\120\0"+
    "\1\u024f\6\0\3\265\3\0\2\265\1\112\3\265\1\u0208"+
    "\10\265\6\u0247\21\265\1\270\35\265\1\0\7\265\3\0"+
    "\2\265\1\112\3\265\1\u0208\10\265\6\u0228\21\265\1\270"+
    "\35\265\1\0\7\265\3\0\2\265\1\112\3\265\1\u0208"+
    "\37\265\1\u0250\24\265\1\u0251\10\265\1\0\7\265\3\0"+
    "\2\265\1\112\3\265\1\u0208\10\265\10\u0252\5\265\4\u0252"+
    "\6\265\1\270\2\265\6\u0252\25\265\1\0\4\265\17\273"+
    "\1\u010c\5\273\10\u01e5\5\273\4\u01e5\11\273\6\u01e5\32\273"+
    "\10\112\1\265\3\112\1\266\7\112\1\267\27\112\1\u024b"+
    "\24\112\1\u024c\4\112\1\0\1\112\1\0\16\112\1\265"+
    "\3\112\1\266\7\112\1\267\10\u024d\5\112\4\u024d\11\112"+
    "\6\u024d\21\112\1\0\1\112\1\0\16\112\1\265\3\112"+
    "\1\266\7\112\1\267\10\u0253\5\112\4\u0253\11\112\6\u0253"+
    "\21\112\1\0\1\112\1\0\6\112\3\265\3\0\46\265"+
    "\1\u0254\24\265\1\u0251\10\265\1\0\7\265\3\0\2\265"+
    "\1\112\14\265\10\u0252\5\265\4\u0252\6\265\1\270\2\265"+
    "\6\u0252\25\265\1\0\7\265\3\0\2\265\1\112\14\265"+
    "\10\u0255\5\265\4\u0255\6\265\1\270\2\265\6\u0255\25\265"+
    "\1\0\4\265\10\112\1\265\3\112\1\266\7\112\1\267"+
    "\10\u0256\5\112\4\u0256\11\112\6\u0256\21\112\1\0\1\112"+
    "\1\0\6\112\3\265\3\0\2\265\1\112\43\265\1\u0250"+
    "\24\265\1\u0251\10\265\1\0\7\265\3\0\2\265\1\112"+
    "\14\265\10\u0257\5\265\4\u0257\6\265\1\270\2\265\6\u0257"+
    "\25\265\1\0\4\265\10\112\1\265\3\112\1\266\7\112"+
    "\1\267\10\u0227\5\112\4\u0227\11\112\6\u0227\21\112\1\0"+
    "\1\112\1\0\6\112\3\265\3\0\2\265\1\112\14\265"+
    "\10\u0228\5\265\4\u0228\6\265\1\270\2\265\6\u0228\25\265"+
    "\1\0\4\265";

  private static int [] zzUnpacktrans() {
    int [] result = new int[36972];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\3\0\1\1\15\0\1\1\5\0\2\1\1\11"+
    "\2\1\1\11\5\1\2\11\3\1\3\11\3\1\1\11"+
    "\2\1\1\11\2\1\1\11\2\1\7\11\3\1\1\11"+
    "\2\1\1\11\1\1\2\11\5\1\2\11\1\1\1\11"+
    "\1\1\1\11\4\1\1\11\5\1\1\11\4\1\3\11"+
    "\1\1\1\11\1\1\1\11\2\1\1\11\1\1\1\11"+
    "\2\1\1\11\2\1\1\11\1\1\1\11\2\1\1\0"+
    "\1\11\1\0\2\11\2\0\1\11\22\0\2\11\1\1"+
    "\1\0\1\11\2\1\4\0\2\11\4\0\2\11\2\0"+
    "\1\11\2\1\1\11\4\1\2\0\1\1\1\0\1\11"+
    "\7\0\7\1\2\11\11\1\1\0\2\11\1\1\2\11"+
    "\2\1\36\0\1\1\17\0\1\11\2\0\1\11\5\0"+
    "\1\1\2\0\1\11\1\0\1\11\1\1\1\0\2\11"+
    "\2\1\13\0\1\1\12\0\1\1\33\0\1\1\2\0"+
    "\1\11\1\0\2\1\1\0\2\11\4\0\1\11\11\0"+
    "\1\11\2\0\1\11\7\0\1\11\4\0\1\11\3\0"+
    "\1\1\4\0\1\11\11\0\3\1\1\0\2\1\1\11"+
    "\4\0\1\11\4\0\1\11\4\0\1\11\5\0\1\11"+
    "\7\0\1\11\1\0\1\1\4\0\1\11\12\0\1\1"+
    "\2\0\1\11\2\0\1\11\1\0\1\11\2\0\1\11"+
    "\14\0\1\11\4\0\1\11\1\1\4\0\1\11\11\0"+
    "\1\1\5\0\1\11\3\0\2\11\3\0\1\11\1\0"+
    "\3\11\2\0\1\11\1\0\1\11\1\0\1\11\5\0"+
    "\1\1\4\0\1\1\1\0\1\11\1\0\3\11\1\1"+
    "\1\11\15\0\1\1\3\0\1\1\1\0\1\1\2\0"+
    "\1\11\2\0\1\1\1\11\2\0\1\11\6\0\4\1"+
    "\5\11\1\1\1\11\6\0\3\1\2\11\3\0\1\1"+
    "\2\0\1\1\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[599];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())+1];

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  int nextState;
  boolean macroDefinition;

  int braceCount;
  int bracketCount;
  int commentCount;

  public _JFlexLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _JFlexLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case COMMENT: {
              yybegin(REPORT_UNCLOSED); return FLEX_BLOCK_COMMENT;
            }  // fall though
            case 600: break;
            case CODE: {
              yybegin(REPORT_UNCLOSED); return FLEX_RAW;
            }  // fall though
            case 601: break;
            case STATES: {
              nextState=REGEXPSTART; yybegin(REPORT_UNCLOSED);
            }  // fall though
            case 602: break;
            case ACTION_CODE: {
              nextState=REGEXPSTART; yybegin(REPORT_UNCLOSED); return FLEX_RAW;
            }  // fall though
            case 603: break;
            case STRING_CONTENT: {
              yybegin(REPORT_UNCLOSED); return FLEX_STRING;
            }  // fall though
            case 604: break;
            case CHARCLASS: {
              nextState=REGEXP; yybegin(REPORT_UNCLOSED); return FLEX_BRACK2;
            }  // fall though
            case 605: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return FLEX_RAW;
            }
          // fall through
          case 139: break;
          case 2:
            { return FLEX_LINE_COMMENT;
            }
          // fall through
          case 140: break;
          case 3:
            { return BAD_CHARACTER;
            }
          // fall through
          case 141: break;
          case 4:
            { 
            }
          // fall through
          case 142: break;
          case 5:
            { return WHITE_SPACE;
            }
          // fall through
          case 143: break;
          case 6:
            { return FLEX_NEWLINE;
            }
          // fall through
          case 144: break;
          case 7:
            { return FLEX_ID;
            }
          // fall through
          case 145: break;
          case 8:
            { return FLEX_COMMA;
            }
          // fall through
          case 146: break;
          case 9:
            { return FLEX_DOT;
            }
          // fall through
          case 147: break;
          case 10:
            { return FLEX_NUMBER;
            }
          // fall through
          case 148: break;
          case 11:
            { return FLEX_ANGLE1;
            }
          // fall through
          case 149: break;
          case 12:
            { yybegin(REGEXP); return FLEX_EQ;
            }
          // fall through
          case 150: break;
          case 13:
            { return FLEX_ANGLE2;
            }
          // fall through
          case 151: break;
          case 14:
            { yypushback(yylength()); yybegin(REGEXP);
            }
          // fall through
          case 152: break;
          case 15:
            { yybegin(STATES); return FLEX_ANGLE1;
            }
          // fall through
          case 153: break;
          case 16:
            { return FLEX_BRACE2;
            }
          // fall through
          case 154: break;
          case 17:
            { return FLEX_CHAR;
            }
          // fall through
          case 155: break;
          case 18:
            { yypushback(yylength()); if (macroDefinition) yybegin(MACROS); else yybegin(REGEXPSTART);
            }
          // fall through
          case 156: break;
          case 19:
            { return FLEX_BANG;
            }
          // fall through
          case 157: break;
          case 20:
            { nextState=REGEXP; yybegin(STRING_CONTENT);
            }
          // fall through
          case 158: break;
          case 21:
            { return FLEX_DOLLAR;
            }
          // fall through
          case 159: break;
          case 22:
            { return FLEX_PAREN1;
            }
          // fall through
          case 160: break;
          case 23:
            { return FLEX_PAREN2;
            }
          // fall through
          case 161: break;
          case 24:
            { return FLEX_STAR;
            }
          // fall through
          case 162: break;
          case 25:
            { return FLEX_PLUS;
            }
          // fall through
          case 163: break;
          case 26:
            { return FLEX_FSLASH;
            }
          // fall through
          case 164: break;
          case 27:
            { return FLEX_QUESTION;
            }
          // fall through
          case 165: break;
          case 28:
            { yybegin(CHARCLASS); return FLEX_BRACK1;
            }
          // fall through
          case 166: break;
          case 29:
            { return FLEX_HAT;
            }
          // fall through
          case 167: break;
          case 30:
            { if (macroDefinition) return FLEX_CHAR; else yybegin(ACTION_CODE); return FLEX_BRACE1;
            }
          // fall through
          case 168: break;
          case 31:
            { if (macroDefinition) yybegin(EXPRBAR); return FLEX_BAR;
            }
          // fall through
          case 169: break;
          case 32:
            { return FLEX_TILDE;
            }
          // fall through
          case 170: break;
          case 33:
            { nextState=REGEXP; yybegin(SKIP_WSNL); return FLEX_ANGLE2;
            }
          // fall through
          case 171: break;
          case 34:
            { braceCount++;
            }
          // fall through
          case 172: break;
          case 35:
            { if (braceCount > 0) braceCount--; else { yypushback(1); yybegin(REGEXPSTART); return FLEX_RAW; }
            }
          // fall through
          case 173: break;
          case 36:
            { yypushback(yylength()); yybegin(nextState); return FLEX_STRING;
            }
          // fall through
          case 174: break;
          case 37:
            { yybegin(nextState); return FLEX_STRING;
            }
          // fall through
          case 175: break;
          case 38:
            { bracketCount=0; yypushback(yylength()); nextState=REGEXP; yybegin(REPORT_UNCLOSED);
            }
          // fall through
          case 176: break;
          case 39:
            { nextState=CHARCLASS; yybegin(STRING_CONTENT);
            }
          // fall through
          case 177: break;
          case 40:
            { yypushback(yylength()); yybegin(CLASSCHARS);
            }
          // fall through
          case 178: break;
          case 41:
            { bracketCount++; return FLEX_BRACK1;
            }
          // fall through
          case 179: break;
          case 42:
            { if (bracketCount > 0) bracketCount--; else yybegin(REGEXP); return FLEX_BRACK2;
            }
          // fall through
          case 180: break;
          case 43:
            { yypushback(yylength()); yybegin(nextState);
            }
          // fall through
          case 181: break;
          case 44:
            { yybegin(nextState); return FLEX_BRACE2;
            }
          // fall through
          case 182: break;
          case 45:
            { yypushback(yylength()); yybegin(CHARCLASS); return FLEX_CHAR;
            }
          // fall through
          case 183: break;
          case 46:
            { yypushback(yylength()); yybegin(CHARCLASS);
            }
          // fall through
          case 184: break;
          case 47:
            { return FLEX_DASH;
            }
          // fall through
          case 185: break;
          case 48:
            { yybegin(CHARCLASS); return FLEX_CHAR;
            }
          // fall through
          case 186: break;
          case 49:
            { yybegin(REGEXP); return FLEX_BRACE2;
            }
          // fall through
          case 187: break;
          case 50:
            { yypushback(yylength()); yybegin(REPORT_UNCLOSED); return FLEX_STRING;
            }
          // fall through
          case 188: break;
          case 51:
            { yybegin(STRING_CONTENT);
            }
          // fall through
          case 189: break;
          case 52:
            { yybegin(nextState); return FLEX_NEWLINE;
            }
          // fall through
          case 190: break;
          case 53:
            { yypushback(yylength()); yybegin(nextState); return FLEX_UNCLOSED;
            }
          // fall through
          case 191: break;
          case 54:
            { yybegin(REGEXPSTART); return FLEX_BRACE1;
            }
          // fall through
          case 192: break;
          case 55:
            { macroDefinition=true; nextState=MACROS; yybegin(SKIP_TOEOL); return FLEX_TWO_PERCS;
            }
          // fall through
          case 193: break;
          case 56:
            { if (commentCount > 0) commentCount--; else { yybegin(nextState); return FLEX_BLOCK_COMMENT; }
            }
          // fall through
          case 194: break;
          case 57:
            { commentCount++;
            }
          // fall through
          case 195: break;
          case 58:
            { return FLEX_STRING;
            }
          // fall through
          case 196: break;
          case 59:
            { nextState=CODE; yybegin(SKIP_TOEOL); return FLEX_OPT_CODE1;
            }
          // fall through
          case 197: break;
          case 60:
            { nextState=MACROS; yybegin(COMMENT);
            }
          // fall through
          case 198: break;
          case 61:
            { macroDefinition=false; nextState=REGEXPSTART; yybegin(SKIP_TOEOL); return FLEX_TWO_PERCS;
            }
          // fall through
          case 199: break;
          case 62:
            { return FLEX_OPT_STATE;
            }
          // fall through
          case 200: break;
          case 63:
            { return FLEX_OPT_XSTATE;
            }
          // fall through
          case 201: break;
          case 64:
            { nextState=MACROS; yybegin(SKIP_TOEOL); return FLEX_OPT_CODE2;
            }
          // fall through
          case 202: break;
          case 65:
            { nextState=REGEXPSTART; yybegin(COMMENT);
            }
          // fall through
          case 203: break;
          case 66:
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 22;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) {
                zzFin = new boolean[zzBufferL.length()+1];
              }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              }
              if (zzFState != -1) {
                zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
              }
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 23;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { yypushback(yylength()); nextState=REGEXP; yybegin(SKIP_WSNL);
            }
          // fall through
          case 204: break;
          case 67:
            { nextState=REGEXP; yybegin(COMMENT);
            }
          // fall through
          case 205: break;
          case 68:
            { return FLEX_CHAR_ESC;
            }
          // fall through
          case 206: break;
          case 69:
            { return FLEX_CHAR_CLASS;
            }
          // fall through
          case 207: break;
          case 70:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { nextState=REGEXP; yybegin(REPEATEXP); return FLEX_BRACE1;
            }
          // fall through
          case 208: break;
          case 71:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { nextState=REGEXPSTART0; yybegin(SKIP_WSNL); return FLEX_ANGLE2;
            }
          // fall through
          case 209: break;
          case 72:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { yybegin(CHARRANGE); return FLEX_CHAR;
            }
          // fall through
          case 210: break;
          case 73:
            { return FLEX_AMPAMP;
            }
          // fall through
          case 211: break;
          case 74:
            { return FLEX_DASHDASH;
            }
          // fall through
          case 212: break;
          case 75:
            { return FLEX_BARBAR;
            }
          // fall through
          case 213: break;
          case 76:
            { return FLEX_TILDETILDE;
            }
          // fall through
          case 214: break;
          case 77:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { yypushback(yylength()); yybegin(CHARCLASS); return FLEX_CHAR;
            }
          // fall through
          case 215: break;
          case 78:
            { yypushback(1); yybegin(CHARCLASS); return FLEX_CHAR;
            }
          // fall through
          case 216: break;
          case 79:
            { yybegin(CHARCLASS); return FLEX_CHAR_ESC;
            }
          // fall through
          case 217: break;
          case 80:
            { return FLEX_VERSION;
            }
          // fall through
          case 218: break;
          case 81:
            { yybegin(REGEXP_CODEPOINT);
            }
          // fall through
          case 219: break;
          case 82:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { nextState=REGEXP; yybegin(MACROUSE); return FLEX_BRACE1;
            }
          // fall through
          case 220: break;
          case 83:
            { yybegin(STRING_CODEPOINT);
            }
          // fall through
          case 221: break;
          case 84:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { return FLEX_CHAR;
            }
          // fall through
          case 222: break;
          case 85:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 2);
            { yybegin(CHARRANGE); return FLEX_CHAR_ESC;
            }
          // fall through
          case 223: break;
          case 86:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { nextState=CHARCLASS; yybegin(MACROUSE); return FLEX_BRACE1;
            }
          // fall through
          case 224: break;
          case 87:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { yybegin(CHARCLASS); return FLEX_CHAR;
            }
          // fall through
          case 225: break;
          case 88:
            { return FLEX_OPT_CUP;
            }
          // fall through
          case 226: break;
          case 89:
            { return FLEX_OPT_INT;
            }
          // fall through
          case 227: break;
          case 90:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 2);
            { return FLEX_CHAR_ESC;
            }
          // fall through
          case 228: break;
          case 91:
            { return FLEX_OPT_7BIT;
            }
          // fall through
          case 229: break;
          case 92:
            { return FLEX_OPT_8BIT;
            }
          // fall through
          case 230: break;
          case 93:
            { return FLEX_OPT_CHAR;
            }
          // fall through
          case 231: break;
          case 94:
            { nextState=CODE; yybegin(SKIP_TOEOL); return FLEX_OPT_EOF1;
            }
          // fall through
          case 232: break;
          case 95:
            { return FLEX_OPT_FULL;
            }
          // fall through
          case 233: break;
          case 96:
            { return FLEX_OPT_LINE;
            }
          // fall through
          case 234: break;
          case 97:
            { return FLEX_OPT_TYPE;
            }
          // fall through
          case 235: break;
          case 98:
            { nextState=MACROS; yybegin(SKIP_TOEOL); return FLEX_OPT_EOF2;
            }
          // fall through
          case 236: break;
          case 99:
            { return FLEX_OPT16BIT;
            }
          // fall through
          case 237: break;
          case 100:
            { return FLEX_OPT_CLASS;
            }
          // fall through
          case 238: break;
          case 101:
            { return FLEX_OPT_DEBUG;
            }
          // fall through
          case 239: break;
          case 102:
            { return FLEX_OPT_FINAL;
            }
          // fall through
          case 240: break;
          case 103:
            { nextState=CODE; yybegin(SKIP_TOEOL); return FLEX_OPT_INIT1;
            }
          // fall through
          case 241: break;
          case 104:
            { return FLEX_OPT_YYEOF;
            }
          // fall through
          case 242: break;
          case 105:
            { nextState=MACROS; yybegin(SKIP_TOEOL); return FLEX_OPT_INIT2;
            }
          // fall through
          case 243: break;
          case 106:
            { return FLEX_OPT_BUFFER;
            }
          // fall through
          case 244: break;
          case 107:
            { return FLEX_OPT_COLUMN;
            }
          // fall through
          case 245: break;
          case 108:
            { return FLEX_OPT_CUPSYM;
            }
          // fall through
          case 246: break;
          case 109:
            { return FLEX_OPT_PUBLIC;
            }
          // fall through
          case 247: break;
          case 110:
            { return FLEX_EOF;
            }
          // fall through
          case 248: break;
          case 111:
            { return FLEX_OPT_CTORARG;
            }
          // fall through
          case 249: break;
          case 112:
            { nextState=CODE; yybegin(SKIP_TOEOL); return FLEX_OPT_EOFVAL1;
            }
          // fall through
          case 250: break;
          case 113:
            { return FLEX_OPT_EXTENDS;
            }
          // fall through
          case 251: break;
          case 114:
            { return FLEX_OPT_INCLUDE;
            }
          // fall through
          case 252: break;
          case 115:
            { return FLEX_OPT_INTEGER;
            }
          // fall through
          case 253: break;
          case 116:
            { return FLEX_OPT_INTWRAP;
            }
          // fall through
          case 254: break;
          case 117:
            { return FLEX_OPT_NOTUNIX;
            }
          // fall through
          case 255: break;
          case 118:
            { return FLEX_OPT_UNICODE;
            }
          // fall through
          case 256: break;
          case 119:
            { nextState=MACROS; yybegin(SKIP_TOEOL); return FLEX_OPT_EOFVAL2;
            }
          // fall through
          case 257: break;
          case 120:
            { return FLEX_OPT_ABSTRACT;
            }
          // fall through
          case 258: break;
          case 121:
            { return FLEX_OPT_CASELESS;
            }
          // fall through
          case 259: break;
          case 122:
            { return FLEX_OPT_CUPDEBUG;
            }
          // fall through
          case 260: break;
          case 123:
            { return FLEX_OPT_EOFCLOSE;
            }
          // fall through
          case 261: break;
          case 124:
            { return FLEX_OPT_EOFTHROW;
            }
          // fall through
          case 262: break;
          case 125:
            { return FLEX_OPT_FUNCTION;
            }
          // fall through
          case 263: break;
          case 126:
            { nextState=CODE; yybegin(SKIP_TOEOL); return FLEX_OPT_EOFTHROW1;
            }
          // fall through
          case 264: break;
          case 127:
            { return FLEX_OPT_INITTHROW;
            }
          // fall through
          case 265: break;
          case 128:
            { return FLEX_OPT_SCANERROR;
            }
          // fall through
          case 266: break;
          case 129:
            { nextState=MACROS; yybegin(SKIP_TOEOL); return FLEX_OPT_EOFTHROW2;
            }
          // fall through
          case 267: break;
          case 130:
            { return FLEX_OPT_APIPRIVATE;
            }
          // fall through
          case 268: break;
          case 131:
            { return FLEX_OPT_IGNORECASE;
            }
          // fall through
          case 269: break;
          case 132:
            { return FLEX_OPT_IMPLEMENTS;
            }
          // fall through
          case 270: break;
          case 133:
            { nextState=CODE; yybegin(SKIP_TOEOL); return FLEX_OPT_INITTHROW1;
            }
          // fall through
          case 271: break;
          case 134:
            { return FLEX_OPT_STANDALONE;
            }
          // fall through
          case 272: break;
          case 135:
            { return FLEX_OPT_YYLEXTHROW;
            }
          // fall through
          case 273: break;
          case 136:
            { nextState=MACROS; yybegin(SKIP_TOEOL); return FLEX_OPT_INITTHROW2;
            }
          // fall through
          case 274: break;
          case 137:
            { nextState=CODE; yybegin(SKIP_TOEOL); return FLEX_OPT_YYLEXTHROW1;
            }
          // fall through
          case 275: break;
          case 138:
            { nextState=MACROS; yybegin(SKIP_TOEOL); return FLEX_OPT_YYLEXTHROW2;
            }
          // fall through
          case 276: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
